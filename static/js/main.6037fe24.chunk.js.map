{"version":3,"sources":["redux/constants.js","App.js","redux/actions.js","redux/adviceReducer.js","redux/root.js","index.js","redux/helpers.js"],"names":["POLL_ADVICE_FULFILLED","POLL_ADVICE_START","POLL_ADVICE_STOP","UPDATE_FREQUENCY","UPDATE_FREQUENCY_FULFILLED","App","dispatch","useDispatch","advice","useSelector","state","adviceReducer","frequency","className","htmlFor","max","min","name","type","value","onChange","e","payload","updateFrequency","target","onClick","alert","initialState","isPolling","action","response","slip","rootReducer","combineReducers","rootEpic","combineEpics","action$","state$","stopAdvicePolling$","pipe","ofType","switchMap","pollingInMs","timer","takeUntil","from","ajax","get","map","updateFrequencyFulfilled","store","persistedState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","middlewares","enhancers","applyMiddleware","composedEnhancers","createStore","run","configureStore","serializedState","sessionStorage","getItem","JSON","parse","undefined","error","loadState","subscribe","stringify","setItem","console","log","persistState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6037fe24.chunk.js","sourcesContent":["export const POLL_ADVICE_FULFILLED = 'POLL_ADVICE_FULFILLED';\r\nexport const POLL_ADVICE_START = 'POLL_ADVICE_START';\r\nexport const POLL_ADVICE_STOP = 'POLL_ADVICE_STOP';\r\nexport const UPDATE_FREQUENCY = 'UPDATE_FREQUENCY';\r\nexport const UPDATE_FREQUENCY_FULFILLED = 'UPDATE_FREQUENCY_FULFILLED';","import './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { startAdvicePolling, stopAdvicePolling, updateFrequency } from './redux/actions';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const advice = useSelector(state => state.adviceReducer.advice);\n  const frequency = useSelector(state => state.adviceReducer.frequency);\n\n  const getAdvice = () => {\n    if (frequency > 0 && frequency <= 10) {\n      dispatch(startAdvicePolling());\n    }\n    else {\n      alert('Please select between 1 and 10 seconds.');\n    }\n  }\n  \n  return (\n    <div className='App'>\n      <div className='adviceContainer'>\n        <h1>{advice ? advice : 'Start polling to read random bits of advice'}</h1>\n        <div className='frequencyContainer'>\n          <label htmlFor='pollingSeconds'>How frequently do you need advice (in seconds)?</label>\n          <input max={10} min={1} name='pollingSeconds' type='number' value={frequency} onChange={e => dispatch(updateFrequency(e.target.value))} />\n        </div>\n        <div className='buttonsContainer'>\n          <button onClick={getAdvice}>Start Polling</button>\n          <button onClick={() => dispatch(stopAdvicePolling())}>Stop Polling</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n  POLL_ADVICE_FULFILLED,\r\n  POLL_ADVICE_START,\r\n  POLL_ADVICE_STOP,\r\n  UPDATE_FREQUENCY,\r\n  UPDATE_FREQUENCY_FULFILLED,\r\n} from './constants';\r\nimport {\r\n  map,\r\n  switchMap,\r\n  takeUntil,\r\n} from 'rxjs/operators';\r\nimport { ajax } from 'rxjs/ajax';\r\nimport { ofType } from 'redux-observable';\r\nimport {\r\n  timer,\r\n  from,\r\n} from 'rxjs';\r\n\r\nexport const startAdvicePolling = () => ({ type: POLL_ADVICE_START });\r\nexport const startAdvicePollingFulfilled = ({ response }) => ({ type: POLL_ADVICE_FULFILLED, payload: response });\r\nexport const stopAdvicePolling = () => ({ type: POLL_ADVICE_STOP });\r\nexport const adviceEpic = (action$, state$) => {\r\n\r\n  const stopAdvicePolling$ = action$.pipe(\r\n    ofType(POLL_ADVICE_STOP),\r\n  );\r\n\r\n  return action$.pipe(\r\n    ofType(POLL_ADVICE_START),\r\n    switchMap(() => {\r\n      \r\n      const pollingInMs = state$.value.adviceReducer.frequency * 1000;\r\n      \r\n      return timer(0, pollingInMs).pipe(\r\n        takeUntil(stopAdvicePolling$),\r\n        switchMap(() => from(ajax.get('https://api.adviceslip.com/advice'))),\r\n        map(payload => ({ type: POLL_ADVICE_FULFILLED, payload }))\r\n      );\r\n    })\r\n  );\r\n};\r\n\r\nexport const updateFrequency = frequency => ({ type: UPDATE_FREQUENCY, payload: frequency });\r\nexport const updateFrequencyFulfilled = ({ payload }) => ({ type: UPDATE_FREQUENCY_FULFILLED, payload });\r\nexport const updateFrequencyEpic = action$ => action$.pipe(\r\n  ofType(UPDATE_FREQUENCY),\r\n    map(response => updateFrequencyFulfilled(response))\r\n);","import {\r\n  POLL_ADVICE_FULFILLED,\r\n  POLL_ADVICE_START,\r\n  POLL_ADVICE_STOP,\r\n  UPDATE_FREQUENCY_FULFILLED,\r\n} from './constants.js';\r\n\r\nconst initialState = {\r\n  advice: '',\r\n  frequency: 1,\r\n  isPolling: false,\r\n};\r\n\r\nconst adviceReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case POLL_ADVICE_FULFILLED: {\r\n      return {\r\n        ...state,\r\n        advice: action.payload.response.slip.advice,\r\n      };\r\n    }\r\n\r\n    case POLL_ADVICE_START: {\r\n      return {\r\n        ...state,\r\n        isPolling: true,\r\n      }\r\n    }\r\n\r\n\r\n    case POLL_ADVICE_STOP: {\r\n      return {\r\n        ...state,\r\n        isPolling: false,\r\n      }\r\n    }\r\n\r\n    case UPDATE_FREQUENCY_FULFILLED: {\r\n      return {\r\n        ...state,\r\n        frequency: action.payload\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default adviceReducer;","import { combineReducers } from 'redux';\r\nimport adviceReducer from './adviceReducer';\r\nimport { combineEpics } from 'redux-observable';\r\nimport { adviceEpic, updateFrequencyEpic } from './actions';\r\n\r\n// reducers\r\nexport const rootReducer = combineReducers({\r\n    adviceReducer\r\n});\r\n\r\n// epics\r\nexport const rootEpic = combineEpics(\r\n  adviceEpic,\r\n  updateFrequencyEpic,\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { configureStore, loadState, persistState } from './redux/helpers';\n\nconst persistedState = loadState();\nconst store = configureStore(persistedState);\n\nstore.subscribe(() => {\n  persistState(store.getState());\n});\n\nReactDOM.render(\n\t<Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport { rootReducer } from './root';\r\nimport { rootEpic } from './root';\r\n\r\nexport const configureStore = (persistedState) => {\r\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n  const epicMiddleware = createEpicMiddleware();\r\n  const middlewares = [epicMiddleware];\r\n  const middlewareEnhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n\r\n  const enhancers = [middlewareEnhancer];\r\n  const composedEnhancers = compose(...enhancers);\r\n\r\n  const store = createStore(rootReducer, persistedState, composedEnhancers);\r\n\r\n  epicMiddleware.run(rootEpic);\r\n\r\n  return store;\r\n}\r\n\r\nexport function loadState() {\r\n  try {\r\n    const serializedState = sessionStorage.getItem('advice_state');\r\n    return serializedState !== null ? JSON.parse(serializedState) : undefined;\r\n  }\r\n  catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport function persistState(state) {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    sessionStorage.setItem('advice_state', serializedState);\r\n  }\r\n  catch (error) {\r\n    console.log('Error trying to save to browser storage');\r\n  }\r\n};"],"sourceRoot":""}